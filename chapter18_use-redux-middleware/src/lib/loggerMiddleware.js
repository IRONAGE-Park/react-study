
/*
==========Chapter 18.2==========
    미들웨어란?

    "리덕스 미들웨어"는 액션을 디스패치했을 때 리듀서에서 이를 처리하기에 앞서 사전에 지정된 작업들을 실행함.
    '미들웨어'는 '액션'과 '리듀서'의 중간자라고 볼 수 있음.
        * 액션 -> 미들웨어 -> 리듀서 -> 스토어
    리듀서가 액션을 처리하기 전에 미들웨어가 할 수 있는 작업은 여러 가지가 있음.
    전달받은 액션을 단순히 콘솔에 기록하거나, 전달받은 액션 정보를 기반으로 액션을 아예 취소하거나,
    다른 종류의 액션을 추가로 디스패치할 수도 있음.

==========Chapter 18.2.1==========
    미들웨어 만들기

    실제 프로젝트를 작업할 때 미들웨어를 직접 만들어서 사용할 일은 그리 많지 않음. => 다른 개발자가 만들어 놓은 미들웨어를 사용하면 되기 때문.
    간단한 미들웨어를 직접 만들어 미들웨어가 어떻게 동작하는지 이해하고, 원하는 미들웨어를 찾을 수 없을 때는
    상황에 따라 직접 만들거나 기존 미들웨어를 커스터마이징하여 사용할 수도 있음.
    
    const loggerMiddleware = store => next => action => {
        // 미들웨어 기본 구조
    }
    
    미들웨어는 결국 함수를 반환하는 함수를 반환하는 함수.
    여기에 있는 함수에서 파라미터로 받아오는 store는 리덕스 스토어의 인스턴스, action은 디스패치된 액션을 가리킴.
    그리고 next 파라미터는 함수 형태이며, store.dispatch와 비슷한 역할을 함.
    하지만 큰 차이점이 있는데, next(action)을 호출하면 그다음 처리해야 할 미들웨어에게 액션을 넘겨주고, 미들웨어가 없다면 리듀서에게 액션을 넘겨줌.

    미들웨어 내부에서 store.dispatch를 사용하면 첫 번째 미들웨어부터 다시 처리함.
    만약 미들웨어에서 next를 사용하지 않으면 액션이 리듀서에 전달되지 않음. => 액션이 무시되는 것.
*/

const loggerMiddleware = function loggerMiddleware(store) {
    return function(next) {
        return function(action) {
            console.group(action && action.type); // 액션 타입으로 log를 그룹화함
            console.log('prev state', store.getState());
            console.log('action', action);
            next(action); // 다음 미들웨어 혹은 리듀서에게 전달
            console.log('next state', store.getState()); // 업데이트된 상태
            console.groupEnd();
        }
    }
}

export default loggerMiddleware;

/*
    1. 이전 상태.
    2. 액션 정보.
    3. 새로워진 정보.

    위 정보를 순차적으로 콘솔에 보여 주는 미들웨어를 작성함.

    미들웨어에서는 이처럼 여러 종류의 작업을 처리할 수 있음.
    특정 조건에 따라 액션을 무시하게 할 수도 있고, 특정 조건에 따라 액션 정보를 가로채서 변경한 후
    리듀서에게 전달해 줄 수도 있음. 또한, 특정 액션에 기반하여 새로운 액션을 여러 번 디스패치할 수도 있음.

    이러한 미들웨어 속성을 사용하여 네트워크 요청과 같은 비동기 작업을 관리하면 매우 유용함.
*/